
-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-
SOLID Design Principles
-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-

SOLID Principles ::

There are five SOLID principles:

Single Responsibility Principle (SRP)

Open Closed Principle (OCP)

Liskov Substitution Principle (LSP)

Interface Segregation Principle (ISP)

Dependency Inversion Principle (DIP)


1. (SRP)
Definition: A class should have only one reason to change.
this means that a class should not be loaded with multiple responsibilities and a single responsibility should not be spread across multiple classes.

2. (OCP)
Definition: Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.
This principle suggests that the class should be easily extended but there is no need to change its core implementations.

i.e. New features should be implemented using the new code, but not by changing existing code. The main benefit of adhering 
to OCP is that it potentially streamlines code maintenance and reduces the risk of breaking the existing implementation.

3. (LSP)
LSP is a fundamental principle of SOLID Principles and states that if program or module is using base class then derived class should 
be able to extend their base class without changing their original implementation

4. (ISP)
Definition: No client should be forced to implement methods which it does not use, and the contracts should be broken down to thin ones.

Using ISP, we can create separate interfaces for each operation or requirement rather than having a single class to do the same work.

When all the tasks are done by a single class or in other words, one class is used in almost all the application classes then it has become a 
fat class with overburden. 

Inheriting such class will results in having sharing methods which are not relevant to derived classes but its there in the base 
class so that will inherit in the derived class.


5. (DIP)
High-level modules should not depend on low-level modules. Both should depend on abstractions.

Abstractions should not depend on details. Details should depend on abstractions.

In simple words, the principle says that there should not be a tight coupling among components of 
software and to avoid that, the components should depend on abstraction.

Inversion of Control (IoC) is a technique to implement the Dependency Inversion Principle in C#. Inversion of control can be 
implemented using either an abstract class or interface.

-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-
-::: C# | Encapsulation :::-
-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-


Encapsulation is defined as the wrapping up of data under a single unit.

encapsulation is a protective shield that prevents the data from being accessed by the code outside this shield.

- As in encapsulation, the data in a class is hidden from other classes, so it is also known as data-hiding.

- Encapsulation can be achieved by: Declaring all the variables in the class as private and using C# Properties 
in the class to set and get the values of variables.


public class DemoEncap { 
      
    // private variables declared 
    // these can only be accessed by 
    // public methods of class 
    private String studentName; 
    private int studentAge; 
      
    // using accessors to get and  
    // set the value of studentName 
    public String Name 
    { 
          
        get { return studentName;} 
          
        set { studentName = value;} 
          
    } 
      
    // using accessors to get and  
    // set the value of studentAge 
    public int Age 
    { 
        get { return studentAge; } 
          
        set { studentAge = value; } 
          
    } 
} 


Advantages of Encapsulation:

- Data Hiding: The user will have no idea about the inner implementation of the class. 
It will not be visible to the user that how the class is stored values in the variables. He only knows that we are passing the values to accessors 
and variables are getting initialized to that value.

- Increased Flexibility: We can make the variables of the class as read-only or write-only depending on our requirement. 
If we wish to make the variables as read-only then we have to only use Get Accessor in the code. If we wish to make the variables as write-only 
then we have to only use Set Accessor.

- Reusability: Encapsulation also improves the re-usability and easy to change with new requirements.

- Testing code is easy: Encapsulated code is easy to test for unit testing.
  


-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-
-::: C# | Abstraction :::-
-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-


Data Abstraction may also be defined as the process of identifying only the required characteristics of an object ignoring the irrelevant details. 


Abstract Classes

An abstract class is declared with the help of abstract keyword.
In C#, you are not allowed to create objects of the abstract class. Or in other words, you cannot use the abstract class directly with the new operator.
Class that contains the abstract keyword with some of its methods(not all abstract method) is known as an Abstract Base Class.
Class that contains the abstract keyword with all of its methods is known as pure Abstract Base Class.
You are not allowed to declare the abstract methods outside the abstract class.
You are not allowed to declare abstract class as Sealed Class.



Example: Consider a real-life scenario of withdrawing money from ATM. The user only knows that in ATM machine first enter ATM card, 
then enter the pin code of ATM card, and then enter the amount which he/she wants to withdraw and at last, he/she gets their money. 
The user does not know about the inner mechanism of the ATM or the implementation of withdrawing money etc. 
The user just simply know how to operate the ATM machine, this is called abstraction.


-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-
-::: Encapsulation vs Data Abstraction :::-
-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-

Encapsulation is data hiding(information hiding) while Abstraction is detail hiding(implementation hiding).
While encapsulation groups together data and methods that act upon the data, data abstraction deals with exposing to the user and hiding the 
details of implementation.



-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-
-::: Garbage Collection in C# | .NET Framework :::-
-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-

Automatic memory management is made possible by Garbage Collection in .NET Framework. 
When a class object is created at runtime, certain memory space is allocated to it in the heap memory. 
However, after all the actions related to the object are completed in the program, the memory space allocated to it is a waste as it cannot be used. 
In this case, garbage collection is very useful as it automatically releases the memory space after it is no longer required.


Heap Generations in Garbage Collection

The heap memory is organized into 3 generations so that various objects with different lifetimes can be handled appropriately during garbage collection.

Generation 0 : All the short-lived objects such as temporary variables are contained in the generation 0 of the heap memory. 

Generation 1 : If space occupied by some generation 0 objects that are not released in a garbage collection run, then these objects get moved to generation 1. 
		The objects in this generation are a sort of buffer between the short-lived objects in generation 0 and the long-lived objects in generation 2.

Generation 2 : The objects in generation 2 are long lived such as static objects as they remain in the heap memory for the whole process duration.



-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-
-::: C# | Interface :::-
-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-

An interface is like a contract. In the human world, the contract between the two or more humans binds them to act as per the contract. 
In the same way, the interface includes the declaration of one or more functionalities.

If you use an access modifier in an interface then the C# compiler will give a compile-time error "The modifier 'public/private/protected' is not valid 
for this item".
(Visual Studio will show an error immediately without compilation.)

Do not include 'public' in an interface as all the members are public by default. C# will give compile-time error if used 'public'.

- The interface will always defined with the help of keyword ‘interface‘.
- An interface only contains declarations of method, properties, indexers, and events.
- Interfaces can’t have private members.
- By default all the members of Interface are public and abstract.
- Multiple inheritance is possible with the help of Interfaces but not with classes.

interface  <interface_name >
{
    // declare Events
    // declare indexers
    // declare methods 
    // declare properties
}

To declare an interface, use interface keyword. It is used to provide total abstraction. 
That means all the members in the interface are declared with the empty body and are public and abstract by default.
A class that implement interface must implement all the methods declared in the interface.



Advantage of Interface:

It is used to achieve loose coupling.
It is used to achieve total abstraction.
To achieve component-based programming
To achieve multiple inheritance and abstraction.
Interfaces add a plug and play like architecture into applications.


-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-
C# Multithreading
-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-


Multitasking is the simultaneous execution of multiple tasks or processes over a certain time interval. 
Windows operating system is an example of multitasking because it is capable of running more than one 
process at a time like running Google Chrome, Notepad, VLC player etc. at the same time.

The operating system uses a term known as an process to execute all these applications at the same time. 
A process is a part of an operating system which is responsible for executing an application. 
Every program that executes on your system is a process and to run the code inside the application a process uses a term known as an thread.

A thread is a lightweight process, or in other words, a thread is a unit which executes the code under the program. 
So every program has logic and a thread is responsible for executing this logic.

Every program by default carries one thread to executes the logic of the program and the thread is known as the Main Thread, 
so every program or application is by default single threaded model. 


The single thread runs all the process present in the program in synchronizing manner, means one after another. So, the second process
 waits until the first process completes its execution, it consumes more time in processing.



Multi-threading is a process which contains multiple threads within a single process. 
Here each thread performs different activities. 
For example, we have a class and this call contains two different methods, now using multithreading each method is 
executed by a separate thread. So the major advantage of multithreading is it works simultaneously, means multiple tasks executes at the same time.


Advantages of Multithreading:

It executes multiple process simultaneously.
Maximize the utilization of CPU resources.
Time sharing between multiple process.



-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-
Singleton Design Pattern In C#
-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-

Singleton belongs to Creational Type patterns.

This pattern is used when we need to ensure that only one object of a particular class need to be created.
 
Creational design type deals with the object creation machanism which is suitable to a given situation.

Advantages of using the Singleton Design Pattern ::-

1. The first and most important advantage of using the singleton design pattern in C# is that it takes care of concurrent access to the shared resource. 
That means if we are sharing a resource with multiple clients simultaneously, then concurrent access to that resource is well 
managed by the singleton design pattern.

2. It can be extended into a factory pattern.

3. To share common data i.e. master data and configuration data which is not changed that frequently in an application. 
In that case, we need to cache the objects in memory.

Implementation Guidelines ::-

1. You need to declare a constructor that should be private and parameterless.
2. You also need to create a public static property/method which will return the single created instance of the singleton class. 
3. The instance is stored as a private static variable.
4. The class should be declared as sealed which will ensure that it cannot be inherited.


Public sealed class Singleton
{
	private static int counter = 0;

	private static Singleton instance = null;
	public static Singleton GetInstance
	{
		get
		{
			if(instance==null)
				instance = new singleton();
				
			return 	instance;
		}
	}
	
	private Singleton()
	{
		 counter++;
         Console.WriteLine("Counter Value " + counter.ToString());
	}
	
	public void PrintDetails(string message)
	{
		Console.WriteLine(message);
	}
}


namespace SingletonDemo
{
    class Program
    {
        static void Main(string[] args)
        {
            Singleton fromTeachaer = Singleton.GetInstance;
            fromTeachaer.PrintDetails("From Teacher");
            Singleton fromStudent = Singleton.GetInstance;
            fromStudent.PrintDetails("From Student");
            Console.ReadLine();
        }
    }
}


Why is singleton class sealed ::: -

1. First, create the Singleton class without using the sealed keyword. We also create another class with the name 
DerivedSingleton and then Inherits it from the singleton class.

public class Singleton
{
	private Singleton()
	{
	}
}

public class DerivedSingleton : Singleton
{
}
	
Result ::: Error CS0122 ‘Singleton.Singleton()’ is inaccessible due to its protection level


Note :: So, if private constructor restrict inheritance then why we need sealed class.

------------------------------------------------

2. What is a nested class in C#? 

Whenever we defined a class within another class in C# then the inner class is called a nested class or child class. 
Now if we compile the program then we will not get any error. 

public class Singleton
{
	private Singleton()
	{
	}
	
	public class DerivedSingleton : Singleton
	{
	}
}
      
The above output clearly shows that the counter value has incremented to 2 which proves that the private constructor 
executed twice and hence it creates multiple instances of the singleton class. So, by removing the sealed keyword 
we can inherit the singleton class and also possible to create multiple objects of the singleton class. 

This violates singleton design principles.

------------------------------------------------

3. Let’s make the Singleton class as sealed as shown below and then compiled the program and see what happens.
	  
namespace SingletonDemo
{
    public sealed class Singleton
    {
        private static int counter = 0;     
        private static Singleton instance = null;  
        public static Singleton GetInstance
        {
            get
            {
                if (instance == null)
                    instance = new Singleton();
                return instance;
            }
        }  
        private Singleton()
        {
            counter++;
            Console.WriteLine("Counter Value " + counter.ToString());
        }    
        public void PrintDetails(string message)
        {
            Console.WriteLine(message);
        }
        public class DerivedSingleton : Singleton
        {
        }
    }
}

Now, we got an error when compiling the program saying that we cannot derive a sealed class.

So from this point, we conclude that the private constructor in c# will helps us only preventing any external instantiations of the class 
and the sealed keyword will prevent the class inheritances.


	  
-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-

Static Class:-

1. You cannot create the instance of static class.
2. Static Class cannot have constructor.
3. We cannot pass the static class to method.
4. We cannot inherit Static class to another Static class in C#.

Singleton:-
1. You can create one instance of the object and reuse it.
2. Singleton class can have constructor.
3. You can create the object of singleton class and pass it to method.
4. Singleton class does not say any restriction of Inheritance.

Singleton can be extended e.g. through an interface while static class can't be.





-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-
Factory Method Design Pattern - C#
-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-

Factory method pattern falls under Creational Pattern of Gang of Four (GOF) Design Patterns.

The Factory Method pattern is a Creational pattern which defines an interface for creating an object,but let subclass decide which class to instantiate. 

In Factory pattern, we create the object without exposing the creation logic to the client and refer to newly created object using a interface.

   
				uses						Creates
   |Client| ------------------ |Factory| --------------------- |Product|
   

In simple word, the client uses the factory to create an instance of product.


   
A vehicle can consist of any number of wheels, as an example, in a game when a character needs to build a vehicle when they have a set number of wheels.

If we pass the number of Wheels to our factory method it will build the vehicle and return it.


	 public interface IVehicle
	 {

	 }
	 public class Unicycle : IVehicle
	 {

	 }
	 public class Car : IVehicle
	 {

	 }
	 public class Motorbike : IVehicle
	 {

	 }
	 public class Truck : IVehicle
	 {

	 } 


We can now create a VechicleFactory class with a build method to create a vehicle depending on the number of wheels supplied.


	public static class VehicleFactory
	{
		public static IVehicle Build(int numberOfWheels)
		{
			switch (numberOfWheels)
			{
				case 1:
					return new UniCycle();
				case 2:
				case 3:
					return new Motorbike();
				case 4:
					return new Car();
				default :
					return new Truck();

			}
		}
	}

We can now develop our little game, in this example it will be a Console Application, and we'll ask the user to enter a number of 
wheels and then we'll tell them what type of Vehicle they built.
 
	class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Enter a number of wheels between 1 and 12 to build a vehicle and press enter");

            var wheels = Console.ReadLine();
            var vehicle = VehicleFactory.Build(Convert.ToInt32(wheels));
            Console.WriteLine($" You built a {vehicle.GetType().Name}");
            Console.Read();
        }
    }


-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-
C# | Constructors
-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-

A constructor is a special method of the class which gets automatically invoked whenever an instance of the class is created. 

- A constructor can not be abstract, final, static and Synchronized.
- Within a class, you can create only one static constructor.
- A static constructor cannot be a parameterized constructor.
- A constructor doesn’t have any return type, not even void.


1. Default Constructor
A constructor with no parameters is called a default constructor. 
The default constructor initializes all numeric fields to zero and all string and object fields to null inside a class.

2. Parametrized Constructor
A constructor have at least one parameter is called a parametrized constructor. It can initialize each instance of the class to different values.

3. Copy Constructor
This constructor creates an object by copying variables from another object. Its main use is to initialize a new instance to the values of an existing instance.

4. Private Constructor
If a constructor is created with private specifier is known as Private Constructor. 
It is not possible for other classes to derive from this class and also it’s not possible to create an instance of this class.

Points To Remember :

It is the implementation of a singleton class pattern.
use private constructor when we have only static members.
Using private constructor, prevents the creation of the instances of that class.

5. Static Constructor
Static Constructor has to be invoked only once in the class and it has been invoked during the creation of the first reference to a static member in the class.
 A static constructor is initialized static fields or data of the class and to be executed only once.


Points To Remember :

It can’t be called directly.
When it is executing then the user has no control.
It does not take access modifiers or any parameters.
It is called automatically to initialize the class before the first instance created.




 


-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-
Unmanaged Code :-
-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-

1.The code, which is developed outside .NET, Framework is known as unmanaged code.
2.Applications that do not run under the control of the CLR are said to be unmanaged.
3.Unmanaged code is executed with help of wrapper classes.
C++, with code of VB, ASP and COM are examples of unmanaged code.


Managed Code 

1.The code, which is developed in .NET framework, is known as managed code. This code is directly executed by 
CLR with help of managed code execution. Any language that is written in .NET Framework is managed code.


 
-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-
C# | Collection
-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-



There are 2 distinct collection types in C#:

- Standard
	The standard collections are found under the System.Collections.
		Standard collections include ArrayList, Hashtable, Queue, and Stack.
	 
- Generic
	The generic collections are found under System.Collections.Generic. 
		The generic collections include Dictionary<T, T>, List<T>, SortedList<T>, Queue<T>, and Stack<T>

- concurrent
	Concurrent collections include BlockingCollection<T>, ConcurrentDictionary<T, T>, ConcurrentQueue<T>, and ConcurrentStack<T>

1. List:-Lists are indexed based Generic Collections. Lists are Generic form of ArrayList.

2. Dictionary:-Dictionary are key based generics collection. Dictionary are generic form of Hashtable.

3. Stack:-Stack generic collection allows you to get value in "LIFO"(last in first out) manner.

4. Queue:-Queue generic collection allows you to get value in "FIFO"(first in first out) manner.



-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-
collection namespace name in threading
-::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-

The System.Collections.Concurrent namespace provides several thread-safe collection classes that should be used in place of the corresponding types in the System.Collections and System.Collections.Generic namespaces whenever multiple threads are accessing the collection concurrently.


